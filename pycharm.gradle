import com.sun.istack.internal.NotNull
import org.apache.tools.ant.BuildException
import org.gradle.internal.FileUtils
import org.gradle.internal.jvm.Jvm
import org.xml.sax.ErrorHandler
import org.xml.sax.InputSource
import org.xml.sax.SAXException
import org.xml.sax.SAXParseException

import java.nio.file.Files
import java.nio.file.Paths
import java.util.zip.ZipFile

final String DEFAULT_REPO = "https://download-cf.jetbrains.com/python/pycharm-community-" +
        "${Utils.getPyCharmVersion(project)}.zip"

subprojects {
    task preparePyCharmSandbox(dependsOn: 'jar', type: PrepareSandboxTask) {
        group 'pycharm'

        pluginJar "${project.buildDir}/libs/${project.name}-${Utils.getPluginVersion(project)}.jar"
        configDirectory project.file("${Utils.getPyCharmSandboxDir(project)}/config")
        pluginName project.name
        destinationDir project.file("${Utils.getPyCharmSandboxDir(project)}/plugins")

        doLast {

        }
    }

    apply plugin: 'org.jetbrains.intellij'

    task preparePyCharm {
        group 'pycharm'
        doLast {
            def pyCharmPath = Utils.getPyCharmPath(project)
            def pycharmDir = Paths.get(pyCharmPath)

            def pyCharmVersion = Utils.getPyCharmVersion(project)

            if (!Files.exists(pycharmDir)) {
                println "Start download PyCharmPC-$pyCharmVersion"

                def url = new URL(DEFAULT_REPO)
                def tempDirectory = Files.createTempDirectory("pycharm")
                def file = tempDirectory.resolve("{$pyCharmVersion}.zip").toFile()
                BufferedInputStream bis = new BufferedInputStream(url.openStream())
                FileOutputStream fis = new FileOutputStream(file)
                byte[] buffer = new byte[1024]
                //noinspection GroovyUnusedAssignment
                def count = 0
                while ((count = bis.read(buffer, 0, 1024)) != -1) {
                    fis.write(buffer, 0, count)
                }
                fis.close()
                bis.close()

                println 'PyCharm Loaded'
                println 'Start Unzip PyCharm...'

                UnZipper.unZip(file, pycharmDir.toFile())

                println "Unziped PyCharm to $pycharmDir"
            } else {
                println 'Pycharm Exists'
            }
        }
    }

    task runPyCharm(dependsOn: [preparePyCharm, preparePyCharmSandbox], type: RunPyCharmTask) {
        group 'pycharm'
        pyCharmDirectory new File(Utils.getPyCharmPath(project))
        def sandboxDir = Utils.getPyCharmSandboxDir(project)
        configDirectory project.file("$sandboxDir/config").absoluteFile
        systemDirectory project.file("$sandboxDir/system").absoluteFile
        pluginsDirectory project.file("$sandboxDir/plugins").absoluteFile
    }
}

class PrepareSandboxTask extends Copy {
    Object pluginName
    Object pluginJar
    Object configDirectory

    PrepareSandboxTask() {
        configurePlugin()
    }

    @InputFile
    File getPluginJar() {
        pluginJar != null ? project.file(pluginJar) : null
    }

    void setPluginJar(Object pluginJar) {
        this.pluginJar = pluginJar
    }

    void pluginJar(Object pluginJar) {
        this.pluginJar = pluginJar
    }

    @Input
    String getPluginName() {
        def pluginName = stringInput(pluginName)
        pluginName != null ? FileUtils.toSafeFileName(pluginName) : null
    }

    static String stringInput(input) {
        input = input instanceof Closure ? (input as Closure).call() : input
        return input?.toString()
    }

    void setPluginName(Object pluginName) {
        this.pluginName = pluginName
    }

    void pluginName(Object pluginName) {
        this.pluginName = pluginName
    }

    @Input
    File getConfigDirectory() {
        configDirectory != null ? project.file(configDirectory) : null
    }

    void setConfigDirectory(File configDirectory) {
        this.configDirectory = configDirectory
    }

    void configDirectory(File configDirectory) {
        this.configDirectory = configDirectory
    }

    @Override
    protected void copy() {
        disableIdeUpdate()
        super.copy()
    }

    private void configurePlugin() {
        CopySpec plugin = mainSpec.addChild().into { "${getPluginName()}/lib" }
        plugin.from {
            def librariesToIgnore = new HashSet()
            librariesToIgnore.add(Jvm.current().toolsJar)
            def result = [getPluginJar()]
            result
        }
    }

    @NotNull
    static SourceSet mainSourceSet(@NotNull Project project) {
        JavaPluginConvention javaConvention = project.convention.getPlugin(JavaPluginConvention)
        javaConvention.sourceSets.getByName(SourceSet.MAIN_SOURCE_SET_NAME)
    }


    static Node parseXml(File file) {
        def parser = new XmlParser(false, true, true)
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
        parser.setErrorHandler(new ErrorHandler() {
            @Override
            void warning(SAXParseException e) throws SAXException {

            }

            @Override
            void error(SAXParseException e) throws SAXException {
                throw e
            }

            @Override
            void fatalError(SAXParseException e) throws SAXException {
                throw e
            }
        })
        InputStream inputStream = new FileInputStream(file)
        InputSource input = new InputSource(new InputStreamReader(inputStream, "UTF-8"))
        input.setEncoding("UTF-8")
        try {
            return parser.parse(input)
        }
        finally {
            inputStream.close()
        }
    }

    @NotNull
    static FileCollection sourcePluginXmlFiles(@NotNull Project project) {
        Set<File> result = new HashSet<>()
        mainSourceSet(project).resources.srcDirs.each {
            def pluginXml = new File(it, "META-INF/plugin.xml")
            if (pluginXml.exists()) {
                try {
                    if (parseXml(pluginXml).name() == 'idea-plugin') {
                        result += pluginXml
                    }
                } catch (SAXParseException ignore) {
                }
            }
        }
        project.files(result)
    }

    private void disableIdeUpdate() {
        def optionsDir = new File(getConfigDirectory(), "options")
        if (!optionsDir.exists() && !optionsDir.mkdirs()) {
            return
        }

        def updatesConfig = new File(optionsDir, "updates.xml")
        if (!updatesConfig.exists() && !updatesConfig.createNewFile()) {
            return
        }
        def parse
        try {
            parse = parseXml(updatesConfig)
        }
        catch (SAXParseException ignore) {
            updatesConfig.text = "<application></application>"
            parse = parseXml(updatesConfig)
        }

        def component = null
        for (Node c : parse.component) {
            if (c.attribute('name') == 'UpdatesConfigurable') {
                component = c
                break
            }
        }
        if (!component) {
            component = new Node(null, 'component', ['name': 'UpdatesConfigurable'])
            parse.append(component)
        }
        def option = null
        for (Node o : component.option) {
            if (o.attribute('name') == 'CHECK_NEEDED') {
                option = o
                break
            }
        }
        if (!option) {
            option = new Node(null, 'option', ['name': 'CHECK_NEEDED'])
            component.append(option)
        }
        option.'@value' = 'false'
        def writer
        try {
            writer = new PrintWriter(new FileWriter(updatesConfig))
            def printer = new XmlNodePrinter(writer)
            printer.preserveWhitespace = true
            printer.print(parse)
        }
        finally {
            if (writer) {
                writer.close()
            }
        }
    }
}

class RunPyCharmTask extends JavaExec {

    private File pyCharmDirectory
    private File configDirectory
    private File systemDirectory
    private File pluginsDirectory

    File getPyCharmDirectory() {
        return pyCharmDirectory
    }

    void setPyCharmDirectory(File pyCharmDirectory) {
        this.pyCharmDirectory = pyCharmDirectory
    }

    File getConfigDirectory() {
        return configDirectory
    }

    void setConfigDirectory(File configDirectory) {
        this.configDirectory = configDirectory
    }

    File getSystemDirectory() {
        return systemDirectory
    }

    void setSystemDirectory(File systemDirectory) {
        this.systemDirectory = systemDirectory
    }

    File getPluginsDirectory() {
        return pluginsDirectory
    }

    void setPluginsDirectory(File pluginsDirectory) {
        this.pluginsDirectory = pluginsDirectory
    }

    RunPyCharmTask() {
        setMain("com.intellij.idea.Main")
        enableAssertions = true
        outputs.upToDateWhen { false }
    }

    @Override
    void exec() {
        workingDir = project.file("$pyCharmDirectory/bin/")
        configureClasspath()
        configureSystemProperties()
        configureJvmArgs()
        super.exec()
    }

    private void configureClasspath() {
        def toolsJar = Jvm.current().toolsJar
        if (toolsJar != null) classpath += project.files(toolsJar)
        classpath += project.files(
                "$pyCharmDirectory/lib/bootstrap.jar",
                "$pyCharmDirectory/lib/extensions.jar",
                "$pyCharmDirectory/lib/util.jar",
                "$pyCharmDirectory/lib/trove4j.jar",
                "$pyCharmDirectory/lib/jdom.jar",
                "$pyCharmDirectory/lib/log4j.jar",
                "$pyCharmDirectory/lib/jna.jar")
    }

    def configureSystemProperties() {
        systemProperties(getPyCharmSystemProperties(configDirectory, systemDirectory, pluginsDirectory))
        def operatingSystem = org.gradle.internal.os.OperatingSystem.current()
        if (operatingSystem.isMacOsX()) {
            systemProperty("idea.smooth.progress", false)
            systemProperty("apple.laf.useScreenMenuBar", true)
        } else if (operatingSystem.isUnix() && !getSystemProperties().containsKey("sun.awt.disablegrab")) {
            systemProperty("sun.awt.disablegrab", true)
        }
        systemProperty("idea.classpath.index.enabled", false)
        systemProperty("idea.is.internal", true)

        if (!getSystemProperties().containsKey('idea.platform.prefix')) {
            systemProperty('idea.platform.prefix', 'PyCharmCore')
        }
    }

    @NotNull
    private static Map<String, Object> getPyCharmSystemProperties(@NotNull File configDirectory,
                                                                  @NotNull File systemDirectory,
                                                                  @NotNull File pluginsDirectory) {
        def result = ["idea.config.path" : configDirectory.absolutePath,
                      "idea.system.path" : systemDirectory.absolutePath,
                      "idea.plugins.path": pluginsDirectory.absolutePath]
        result
    }

    def configureJvmArgs() {
        jvmArgs = getPyCharmJvmArgs(this, getJvmArgs(), pyCharmDirectory)
    }

    @NotNull
    private static List<String> getPyCharmJvmArgs(@NotNull JavaForkOptions options,
                                                  @NotNull List<String> originalArguments,
                                                  @NotNull File pyCharmDirectory) {
        if (options.maxHeapSize == null) options.maxHeapSize = "512m"
        if (options.minHeapSize == null) options.minHeapSize = "256m"
        boolean hasPermSizeArg = false
        def result = []
        for (String arg : originalArguments) {
            if (arg.startsWith("-XX:MaxPermSize")) {
                hasPermSizeArg = true
            }
            result += arg
        }

        result += "-Xbootclasspath/a:${pyCharmDirectory.absolutePath}/lib/boot.jar"
        if (!hasPermSizeArg) result += "-XX:MaxPermSize=250m"
        return result
    }
}

class UnZipper {
    static void unZip(@NotNull File pluginZip, @NotNull File targetDirectory) {
        def zipFile = new ZipFile(pluginZip)
        try {
            def entries = zipFile.entries()
            while (entries.hasMoreElements()) {
                def entry = entries.nextElement()
                def path = entry.name
                if (!path) {
                    continue
                }
                File dest = new File(targetDirectory, path)
                final ERROR_MESSAGE = "Cannot unzip: $pluginZip.absolutePath"
                if (entry.isDirectory()) {
                    if (!dest.exists() && !dest.mkdirs()) {
                        throw new BuildException(ERROR_MESSAGE)
                    }
                } else {
                    if (!dest.getParentFile().exists() && !dest.getParentFile().mkdirs()) {
                        throw new BuildException(ERROR_MESSAGE)
                    }
                    OutputStream outputStream = new BufferedOutputStream(new FileOutputStream(dest))
                    try {
                        copyInputStream(zipFile.getInputStream(entry), outputStream)
                    } finally {
                        outputStream.close()
                    }
                }
            }
        } finally {
            zipFile.close()
        }
    }

    private static void copyInputStream(InputStream input, OutputStream output) throws IOException {
        byte[] buffer = new byte[1024]
        int len
        while ((len = input.read(buffer)) >= 0) {
            output.write(buffer, 0, len)
        }
        input.close()
        output.close()
    }
}

class Utils {
    static String getPyCharmVersion(@NotNull Project project) {
        if (project.hasProperty('pyCharmVersion')) {
            return project.getProperties().get('pyCharmVersion')
        }

        if (project.hasProperty('ideaVersion')) {
            return project.getProperties().get('ideaVersion')
        }

        return "LATEST-EAP-SNAPSHOT"
    }

    static String getPluginVersion(@NotNull Project project) {
        if (project.hasProperty('pluginVersion')) {
            return project.getProperties().get('pluginVersion')
        }

        if (project.hasProperty('version')) {
            return project.getProperties().get('version')
        }

        return "SNAPSHOT"
    }

    static String getPyCharmSandboxDir(@NotNull Project project) {
        if (project.hasProperty('pyCharmSandboxDir')) {
            return project.getProperties().get('pyCharmSandboxDir')
        }

        if (project.hasProperty('ideaSandboxDir')) {
            return project.getProperties().get('ideaSandboxDir')
        }

        return "pycharm-sandbox"
    }

    static String getPyCharmPath(@NotNull Project project) {
        if (project.hasProperty('pyCharmPath')) {
            return project.getProperties().get('pyCharmPath')
        }

        final String gradleHomePath = project.gradle.gradleUserHomeDir.absolutePath
        final DEFAULT_RELATIVE_PATH = "/caches/modules-2/files-2.1/org.jetbrains.python/pycharm/pycharmPC/"

        return gradleHomePath + DEFAULT_RELATIVE_PATH + getPyCharmVersion(project)
    }
}